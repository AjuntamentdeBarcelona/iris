"""
Utility decorators for improving the autodocs of the API Views generated by the rest-framework-yasg.
"""
import inspect

from drf_yasg import openapi
from drf_yasg.openapi import TYPE_STRING
from rest_framework import status, permissions


def imi_roles(fn, roles):
    """
    Defines the roles dict to a given fn view. The roles must be a dict of style: {role: desc}
    """
    setattr(fn, '_imi_roles', roles)
    return fn


def extract_limit_message(cls):
    """
    Returns the throttling limit message for a class. As any other autodoc classes, only works with classes fully
    initialized with the rate and throttle attributes. Any dynamic behaviour dependent on request or database data,
    must be documented manually.

    :param cls:
    :return:
    """
    rates = []
    for t in getattr(cls, 'throttle_classes', []):
        scope = getattr(cls, t.scope_attr) if hasattr(t, 'scope_attr') else getattr(t, 'scope', None)
        rate = getattr(t, 'rate', t.THROTTLE_RATES.get(scope))
        rates.append('* {}{}'.format(scope + ': ' if scope else '', rate.replace('/', 'rq/')))
    return '\n'.join(rates)


def _get_methods_for_autodoc(cls):
    """
    :param cls:
    :return: all methods with swagger auto doc of a given class
    """
    members = dict(inspect.getmembers(cls))
    for method_name in cls.http_method_names:
        # If the class implements the http verb, add the autoschema responses
        method = members.get(method_name, None)
        if method and hasattr(method, '_swagger_auto_schema'):
            yield method


def _set_throttle_classes(cls, responses,  expand_cls_docs=True):
    """
    Extends a list of possible responses docs of an api view class if there are throttle classes.
    :param cls:
    :param responses:
    :param expand_cls_docs:
    """
    throttle_classes = getattr(cls, 'throttle_classes', [])
    # Check if have throttling
    if throttle_classes:
        rates = extract_limit_message(cls)
        if status.HTTP_429_TOO_MANY_REQUESTS not in responses:
            responses[status.HTTP_429_TOO_MANY_REQUESTS] = openapi.Schema(
                title="Too many requests",
                description="You have exceeded the service limits by sending too many requests on a short time "
                            "interval. The service rates by its group are: {}".format(rates),
                type=TYPE_STRING,
            )
        if expand_cls_docs:
            cls.__doc__ = """{}
### Service limits

The following service limits are applied to this API endpoint (note that the limit count is tracked by
group rather than individual endpoint).

{}
                """.format(cls.__doc__, rates)


def _set_perm_docs(cls, responses):
    """
    Extends a list of possible responses docs of an api view class if there are permissions classes.
    :param cls:
    :param responses:
    """
    perm_classes = getattr(cls, 'permission_classes', [])
    if perm_classes and permissions.AllowAny not in perm_classes:
        if status.HTTP_403_FORBIDDEN not in responses:
            responses[status.HTTP_403_FORBIDDEN] = openapi.Schema(
                title="Forbidden use",
                description="Your user don't have permission for performing the action.",
                type=TYPE_STRING,
            )
        if status.HTTP_401_UNAUTHORIZED not in responses:
            responses[status.HTTP_401_UNAUTHORIZED] = openapi.Schema(
                title="Must be authenticated",
                description="This API call requires and authenticated user.",
                type=TYPE_STRING,
            )


def permissions_autodoc(cls, expand_cls_docs=True):
    """
    Class decorator for APIViews. Adds the authorization errors to the OpenAPI schema, based on the Django Rest
    Framework attributes for defining permission_classes. This decorator considers that if permissions.AllowAny is not
     present, a 401 o 403 error can be returned.

     The expand cls_docs is currently limited to one method APIView docs.

    :todo: expand_cls_docs by processing the method name.
    :param cls:
    :return:
    """
    # Iterate through the http method names known by this class
    for method in _get_methods_for_autodoc(cls):
        # If the class implements the http verb, add the autoschema responses
        # Check if it has restrictive permission classes
        responses = method._swagger_auto_schema.get('responses', {})
        _set_perm_docs(cls, responses)
        _set_throttle_classes(cls, responses, expand_cls_docs)
    return cls
