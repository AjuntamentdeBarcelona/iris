# Generated by Django 2.1.1 on 2020-01-22 08:38
from datetime import timedelta

from django.db import migrations
from django.utils import timezone


def records_cards_ans_limits(apps, schema_editor):
    RecordCard = apps.get_model("record_cards", "RecordCard")
    Parameter = apps.get_model("iris_masters", "Parameter")
    # Only for record_cards of the last 3 months
    for record_card in RecordCard.objects.filter(created_at__gte=timezone.now() - timedelta(days=90)):
        if not record_card.ans_limit_date or not record_card.ans_limit_nearexpire:
            if record_card.element_detail.sla_hours:
                delta_hours = record_card.element_detail.sla_hours
            else:
                try:
                    ans_days_default = int(Parameter.objects.get(parameter="DIES_ANS_DEFECTE").valor)
                except Parameter.DoesNotExist:
                    ans_days_default = 30

                delta_hours = ans_days_default * 24
            record_card.ans_limit_date = record_card.created_at + timedelta(hours=delta_hours)

            try:
                percentage_default = int(Parameter.objects.get(parameter="PERCENTATGE_PROPERA_EXPIRACIO").valor)
            except Parameter.DoesNotExist:
                percentage_default = 10
            percentage_expire = 1 - percentage_default/100
            delta_nearexpire = round(delta_hours * percentage_expire)
            record_card.ans_limit_nearexpire = record_card.created_at + timedelta(hours=delta_nearexpire)
            record_card.save()


def noop(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('record_cards', '0101_recordcard_ans_limit_nearexpire'),
    ]

    operations = [
        migrations.RunPython(records_cards_ans_limits, noop),
    ]
